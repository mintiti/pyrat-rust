name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  rust-checks:
    name: Rust Checks
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('engine/Cargo.lock') }}

    - name: Cache cargo index
      uses: actions/cache@v4
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('engine/Cargo.lock') }}

    - name: Cache cargo build
      uses: actions/cache@v4
      with:
        path: engine/target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('engine/Cargo.lock') }}

    - name: Check formatting
      run: cd engine && cargo fmt --all -- --check

    - name: Run clippy
      run: cd engine && cargo clippy --all-targets --all-features -- -D warnings -A non-local-definitions

    - name: Run tests
      run: cd engine && cargo test --verbose

    - name: Build release
      run: cd engine && cargo build --release --verbose

  python-tests:
    name: Python Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('engine/Cargo.lock') }}

    - name: Cache cargo index
      uses: actions/cache@v4
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('engine/Cargo.lock') }}

    - name: Cache cargo build
      uses: actions/cache@v4
      with:
        path: engine/target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('engine/Cargo.lock') }}

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        enable-cache: true
        cache-dependency-glob: |
          pyproject.toml
          engine/pyproject.toml
          protocol/pyrat_base/pyproject.toml

    - name: Sync workspace dependencies
      run: uv sync

    - name: Build Rust extension
      run: |
        source .venv/bin/activate
        cd engine
        maturin develop --release

    - name: Run Python tests
      run: |
        source .venv/bin/activate
        cd engine
        pytest python/tests -v

  protocol-tests:
    name: Protocol Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('engine/Cargo.lock') }}

    - name: Cache cargo index
      uses: actions/cache@v4
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('engine/Cargo.lock') }}

    - name: Cache cargo build
      uses: actions/cache@v4
      with:
        path: engine/target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('engine/Cargo.lock') }}

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        enable-cache: true
        cache-dependency-glob: |
          pyproject.toml
          engine/pyproject.toml
          protocol/pyrat_base/pyproject.toml

    - name: Sync workspace dependencies
      run: uv sync

    - name: Build Rust extension
      run: |
        source .venv/bin/activate
        cd engine
        maturin develop --release

    - name: Run Protocol tests
      run: |
        source .venv/bin/activate
        cd protocol/pyrat_base
        pytest tests -v || echo "No tests yet"

    - name: Check Protocol formatting
      run: |
        source .venv/bin/activate
        cd protocol/pyrat_base
        ruff check pyrat_base

    - name: Type check Protocol
      run: |
        source .venv/bin/activate
        cd protocol/pyrat_base
        mypy pyrat_base --ignore-missing-imports || echo "Type checking will be enforced when implementation begins"
