[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "pyrat-base"
version = "0.1.0"
description = "Base library for PyRat AI development"
authors = [
    {name = "Minh Tri Truong"},
]
readme = "README.md"
requires-python = ">=3.8"

classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    "pyrat-engine",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.1.0",
    "ruff>=0.2.0",
    "mypy>=1.8.0",
    "pre-commit>=3.5.0",
]

[tool.hatch.build.targets.wheel]
packages = ["pyrat_base"]

[tool.hatch.build.targets.wheel.shared-data]
"pyrat_base/py.typed" = "pyrat_base/py.typed"

[tool.uv.sources]
pyrat-engine = { workspace = true }

[tool.ruff]
line-length = 88
target-version = "py38"

# Enable all rules by default, then configure specific rules
# Select a set of standard rules that cover most common cases
lint.select = [
    "E",   # pycodestyle errors
    "F",   # pyflakes
    "B",   # flake8-bugbear
    "I",   # isort
    "C",   # flake8-comprehensions
    "N",   # pep8-naming
    "UP",  # pyupgrade (keeps code modern)
    "PL",  # pylint
    "RUF", # ruff-specific rules
    "TID", # flake8-tidy-imports
    "TCH", # flake8-type-checking
    "ERA", # eradicate (commented-out code)
]

# Ignore some common annoyances
lint.ignore = [
    "E501",      # Line too long (handled by formatter)
    "PLR0913",   # Too many arguments to function call
    "B008",      # Do not perform function call in argument defaults
]


[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "lf"

[tool.mypy]
python_version = "3.8"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --cov=pyrat_base --cov-report=term-missing"
testpaths = ["tests"]
python_files = ["test_*.py"]
